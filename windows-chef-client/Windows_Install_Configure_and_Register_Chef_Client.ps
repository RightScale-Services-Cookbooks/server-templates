# ---
# RightScript Name: Windows Install, Configure and Register Chef Client
# Description: Install and configure Chef Client
# Inputs:
#   CHEF_CLIENT_ROLES:
#     Category: CHEF
#     Description: 'Comma-separated list of roles which will be applied to this instance.
#       The Chef Client will execute the roles in the order specified here. Example:
#       webserver, monitoring'
#     Input Type: single
#     Required: false
#     Advanced: false
#   CHEF_CLIENT_RUNLIST:
#     Category: CHEF
#     Description: 'A string used to set the permanent run_list for chef-client. If
#       set, this overrides chef/client/roles. Example: recipe[ntp::default], recipe[apache2],
#       role[foobar]'
#     Input Type: single
#     Required: false
#     Advanced: false
#   CHEF_CLIENT_NODE_NAME:
#     Category: CHEF
#     Description: 'Name which will be used to authenticate the Chef Client on the remote
#       Chef Server. If nothing is specified, the instance FQDN will be used. Example:
#       chef-client-host1'
#     Input Type: single
#     Required: false
#     Advanced: false
#   CHEF_CLIENT_COMPANY:
#     Category: CHEF
#     Description: 'Company name to be set in the Client configuration file. This attribute
#       is applicable for Opscode Hosted Chef Server. The company name specified in
#       both the Server and the Client configuration file must match. Example: MyCompany'
#     Input Type: single
#     Required: false
#     Advanced: true
#   CHEF_CLIENT_LOG_LOCATION:
#     Category: CHEF
#     Description: 'The location of the log file. Example: C:/chef/chef-client.log'
#     Input Type: single
#     Required: false
#     Advanced: true
#     Default: text:C:/chef/chef-client.log
#   CHEF_VALIDATION_KEY:
#     Category: CHEF
#     Description: 'Private SSH key which will be used to authenticate the Chef Client
#       on the remote Chef Server. Example: CRED:MY_VALIDATION_PEM'
#     Input Type: single
#     Required: true
#     Advanced: false
#   CHEF_ENVIRONMENT:
#     Category: CHEF
#     Description: 'Specify the environment type for the Chef Client configuration file.
#       Example: development'
#     Input Type: single
#     Required: false
#     Advanced: false
#     Default: text:_default
#   CHEF_VALIDATION_NAME:
#     Category: CHEF
#     Description: 'Validation name, along with the private SSH key, is used to determine
#       whether the Chef Client may register with the Chef Server. The validation_name
#       located on the Server and in the Client configuration file must match. Example:
#       ORG-validator'
#     Input Type: single
#     Required: true
#     Advanced: false
#   CHEF_SERVER_URL:
#     Category: CHEF
#     Description: 'Enter the URL to connect to the remote Chef Server. To connect to
#       the Opscode Hosted Chef use the following syntax https://api.opscode.com/organizations/ORGNAME.
#       Private Chef example: http://example.com:4000/chef'
#     Input Type: single
#     Required: true
#     Advanced: false
#   LOG_LEVEL:
#     Category: CHEF
#     Description: 'The level of logging that will be stored in the log file. Example:
#       debug'
#     Input Type: single
#     Required: true
#     Advanced: true
#     Default: text:info
#     Possible Values:
#     - text:debug
#     - text:info
#     - text:warn
#     - text:error
#     - text:fatal
# Attachments: []
# ...
# Powershell RightScript to install chef client

# Stop and fail script when a command fails.
$errorActionPreference = "Stop"

if (test-path C:\opscode -PathType Container) {
  Write-Output "*** Directory C:\opscode already exists, skipping install..."
  exit 0
}

$chefDir="C:\chef"
if (test-path $chefDir -PathType Container) {
  Write-Output "*** Directory $chefDir already exists, skipping install..."
  exit 0
}
else {
  Write-Output "*** Creating $chefDir ..."
  New-Item $chefDir -type directory | Out-Null
}

######## INPUT validation ############
if (!$env:CHEF_CLIENT_NODE_NAME) {
  $env:CHEF_CLIENT_NODE_NAME=${env:computername}
  Write-Output("*** Input CHEF_CLIENT_NODE_NAME is undefined, using: $env:CHEF_CLIENT_NODE_NAME")
}
if ($env:CHEF_CLIENT_NODE_NAME -notmatch "^[\w -:\.]+$") {
  throw "*** ERROR: Input CHEF_CLIENT_NODE_NAME($env:CHEF_CLIENT_NODE_NAME) is invalid, aborting..."
}


if (!$env:CHEF_CLIENT_LOG_LOCATION) {
  $env:CHEF_CLIENT_LOG_LOCATION=join-path $chefDir "chef-client.log"
  Write-Output("*** Input CHEF_CLIENT_LOG_LOCATION is undefined, using: $env:CHEF_CLIENT_NODE_NAME")
}
if ($env:CHEF_CLIENT_LOG_LOCATION -notmatch "^[\w -\/:\.]+$") {
  throw "*** ERROR: Input CHEF_CLIENT_LOG_LOCATION($env:CHEF_CLIENT_LOG_LOCATION) is invalid, aborting..."
}


if (!$env:LOG_LEVEL) {
  $env:LOG_LEVEL="info"
  Write-Output("*** Input LOG_LEVEL is undefined, using: $env:LOG_LEVEL")
}
if ($env:LOG_LEVEL -notmatch "^(debug|info|warn|error|fatal)$") {
  throw "*** ERROR: Input LOG_LEVEL($env:LOG_LEVEL) is invalid, aborting..."
}


if (!$env:CHEF_VALIDATION_NAME) {
  throw "*** ERROR: Input CHEF_VALIDATION_NAME is undefined, aborting..."
}
if ($env:CHEF_VALIDATION_NAME -notmatch "^[\w -:\.]+$") {
  throw "*** ERROR: Input CHEF_VALIDATION_NAME($env:CHEF_VALIDATION_NAME) is invalid, aborting..."
}


if (!$env:CHEF_SERVER_URL) {
  throw "*** ERROR: Input CHEF_SERVER_URL is undefined, aborting..."
}
if ($env:CHEF_SERVER_URL -notmatch "^[\w-:\.\/]+$") {
  throw "*** ERROR: Input CHEF_SERVER_URL($env:CHEF_SERVER_URL) is invalid, aborting..."
}

Write-Output("*** Installing chef client msi and waiting for the prompt")
. { iwr -useb https://omnitruck.chef.io/install.ps1 } | iex; install

Write-Output("*** Creating $(join-path $chefDir 'validation.pem')")
echo $env:CHEF_VALIDATION_KEY | Out-File -Encoding 'ASCII' $(join-path $chefDir 'validation.pem')

Write-Output("*** Creating $(join-path $chefDir 'client.rb')")
echo @"
# Managed by RightScale
# DO NOT EDIT BY HAND
#
log_level              :$env:LOG_LEVEL
log_location           "$env:CHEF_CLIENT_LOG_LOCATION"
chef_server_url        "$env:CHEF_SERVER_URL"
validation_client_name "$env:CHEF_VALIDATION_NAME"
node_name              "$env:CHEF_CLIENT_NODE_NAME"
ssl_verify_mode        :verify_none
"@ | out-file -encoding 'ASCII' $(join-path $chefDir 'client.rb')


$finalRunList=@()

if ($env:CHEF_CLIENT_ROLES) {
  foreach($role in $env:CHEF_CLIENT_ROLES.Split(',')) {
    $finalRunList+='"role['+$role.trim()+']"'
  }
}

if ($env:CHEF_CLIENT_RUNLIST) {
  foreach($runListItem in $env:CHEF_CLIENT_RUNLIST.Split(',')) {
    $finalRunList+='"'+$runListItem.trim()+'"'
  }
}

$finalRunListString=[string]::join(',',$finalRunList)

Write-Output("*** Creating $(join-path $chefDir 'runlist.json')")
echo @"
/*
# Managed by RightScale
# DO NOT EDIT BY HAND
#*/
{
  "name": "$env:CHEF_CLIENT_NODE_NAME",
  "normal": {
    "company": "$env:CHEF_CLIENT_COMPANY",
    "tags": [
    ]
  },
  "chef_environment": "$env:CHEF_ENVIRONMENT",
  "run_list": [$finalRunListString]
}
"@ | out-file -encoding 'ASCII' $(join-path $chefDir 'runlist.json')

if(!(Test-Path "C:\opscode\chef\embedded\bin\ruby.exe")) {
 throw "*** ERROR: Ruby.exe is missing!"
}
elseif (!(Test-Path "C:\opscode\chef\bin\chef-client")) {
  throw "*** ERROR: Chef-Client is missing!"
}
else {
  Write-Output("*** Executing chef-client")
  Start-Process -FilePath 'C:\opscode\chef\embedded\bin\ruby.exe' -ArgumentList 'C:\opscode\chef\bin\knife',' ssl fetch' -Wait
  Start-Process -FilePath 'C:\opscode\chef\embedded\bin\ruby.exe' -ArgumentList 'C:\opscode\chef\bin\chef-client','--json-attributes C:\chef\runlist.json' -Wait
}
Write-Output(Get-Content $env:CHEF_CLIENT_LOG_LOCATION)
